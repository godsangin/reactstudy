{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","limit","_renderMovies","_this","movies","movie","console","log","src_Movie","medium_cover_image","id","_getMovies","_callee","newlimit","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","_infinitiScroll","scrollHeight","Math","max","document","documentElement","body","scrollTop","clientHeight","window","$","jQuery","this","addEventListener","ok","Error","statusText","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06fa71e4.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie_Colums\">\r\n            <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie_Colums\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie_Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\r\n                </div>\r\n                <p className=\"Movie_Synopsis\">\r\n                <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />   \r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return(\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\"/>\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return(\r\n        <span className=\"Movie_Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Movie","import React, {Component} from 'react';\nimport fetchJsonp from 'fetch-jsonp';\nimport './App.css';\nimport Movie from './Movie';\nimport jQuery from 'jquery';\n\n\n\nclass App extends Component {\n  state={\n    limit:20\n  }\n  componentWillMount(){\n    console.log(\"will mount\");\n    window.$ = window.jQuery = jQuery;\n  }\n  \n  componentDidMount(){\n   this._getMovies(20);\n   window.addEventListener('scroll', this._infinitiScroll, true)\n  }\n\n  _renderMovies = () =>{\n    const movies = this.state.movies.map(movie => {\n      console.log(movie)\n      return <Movie\n       title={movie.title} \n       poster={movie.medium_cover_image}\n       genres={movie.genres} \n       synopsis={movie.synopsis}\n       key={movie.id}/>\n    })\n    return movies\n  }\n\n  _getMovies = async (newlimit) => {\n    const movies = await this._callApi(newlimit)\n    this.setState({\n      limit:newlimit,\n      movies\n    })\n  }\n\n  _callApi = (limit) => {\n    return fetch('http://yts.lt/api/v2/list_movies.jsonp?sort_by=download_count&limit='+limit)\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n\n  }\n\n  _infinitiScroll = () => {\n    let scrollHeight= Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n    let scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n    let clientHeight = document.documentElement.clientHeight;\n\n    if(scrollTop + clientHeight === scrollHeight && this.state.limit < 50){\n      this._getMovies(this.state.limit + 10)\n    }\n  }\n  _validateResponse(response) {\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n    return response;\n  }\n  \n\n  render(){\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\": \"App--loading\"}>\n        {movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}